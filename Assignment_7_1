#include<iostream>
using namespace std;
class graph
{
    private:
        int **AL;
        int no;
        int *visit, *source, *dist;
    public:
        void create();
        void prim();
        int min_index();
        int check();
};

void graph::create()
{
    int i, j, con, ch = 1, choice = 2;
    cout << "\n\t ENTER NO OF VERTICES => ";
    cin >> no;
    AL = new int*[no];
    for(i = 0; i < no; i++)
        *(AL + i) = new int[no];
    cout << "\n\t INITIAL MATRIX  => \n";
    for(i = 0; i < no; i++)
    {
        for(j = 0; j < no; j++)
        {
            *(*(AL + i) + j) = 100;
        }
        *(*(AL + i) + i) = 0;
    }
        
    for(i = 0; i < no; i++)
    {
        for(j = 0; j < no; j++)
        {
            cout << "\t" << *(*(AL + i) + j);
        }
        cout << "\n";
    }
    
    cout << "\n\t TYPE OF GRAPH \n\t\t\t1.DIRECTED GRAPH\n\t\t\t2.UNDIRECTED GRAPH\n\t\t\tENTER CHOICE => ";
    cin >> choice;
    for(j = 0; j < no; j++)
    {
        ch = 1;
        while(ch)
        {
            cout << "\n\tENTER connection of " << j << " => ";
            cin >> con;
            cout << "\n\tENTER DISTACE FROM " << j << " TO " << con << " => ";
            if(*(*(AL + j) + con) == 100)
            {            
                cin >> *(*(AL + j) + con);
                if(choice == 2)
                    *(*(AL + con) + j) = *(*(AL + j) + con);
            }
            else
            {
                cout << "\n\t distace already insert ";
            }
            cout << "\n\t DO YOU WANT TO ADD CONNECTION (0.NO 1.YES)=> ";
            cin >> ch;
        }
    }
    cout << "\n\t\n";
    for(i = 0; i < no; i++)
    {
        for(j = 0; j < no; j++)
        {
            cout << "\t";
            cout << *(*(AL + i) + j);
        }   
        cout << "\n";
    }
}

int graph::min_index()
{
    int min = 99, i, k;
    for(i = 0; i < no; i++)
    {
        if(dist[i] < min && visit[i] == 0)
        {
            min = dist[i];
            k = i;
        }
    }
    return k;
}

int graph::check()
{
    int i;
    for(i = 0; i < no; i++)
    { 
        if(visit[i] == 0)
        {
            return 1;
        }
    }
    return 0;
}

void graph::prim()
{
    int min, k = 0, j = 0, count1 = 2, l = 0, i;
    visit = new int();
    source = new int();
    dist = new int();
    for(i = 0; i < no; i++)
    {
        *(visit + i) = 0;
        *(source + i) = 0;
        *(dist + i) = 100;
        *(dist + k) = 0;
    }
    while(check())
    {
        *(visit + k) = 1;
        for(i = 0; i < no; i++)
        {
            if(*(*(AL + k) + i) != 0)
            {
                if(*(dist + i) >= *(*(AL + k) + i) && *(visit + i) == 0)
                {
                    *(dist + i) = *(*(AL + k) + i);
                    *(source + i) = k;
                }
            }
        }
        k = min_index();
        cout << "\n\t\t min index => " << k;
        cout << "\n\t dist";
        for(i = 0; i < no; i++)
        {
            cout << "\t " << *(dist + i);   
        }
        cout << "\n\t vist";
        for(i = 0; i < no; i++)
        {
            cout << "\t " << *(visit + i);   
        }
        cout << "\n\t source";
        for(i = 0; i < no; i++)
        {
            cout << "\t " << *(source + i);   
        }
    }
}

int main()
{
    graph G;
    G.create();
    G.prim();
    return 0;
}

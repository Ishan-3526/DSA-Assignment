#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int src, dest, weight;
    Edge(int s, int d, int w) : src(s), dest(d), weight(w) {}
};

class UnionFind {
public:
    vector<int> parent, rank;
    
    UnionFind(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; ++i) parent[i] = i;
    }

    int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    void unite(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        
        if (rootX != rootY) {
            if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
};

void kruskal(int V, vector<Edge>& edges) {
    UnionFind uf(V);
    sort(edges.begin(), edges.end(), [](Edge a, Edge b) { return a.weight < b.weight; });
    
    int mstWeight = 0;
    vector<Edge> mstEdges;
    
    for (Edge& edge : edges) {
        if (uf.find(edge.src) != uf.find(edge.dest)) {
            uf.unite(edge.src, edge.dest);
            mstEdges.push_back(edge);
            mstWeight += edge.weight;
        }
    }
    
    cout << "Minimum Spanning Tree (Kruskal's Algorithm):" << endl;
    for (Edge& edge : mstEdges) {
        cout << "Edge: " << edge.src << " - " << edge.dest << ", Weight: " << edge.weight << endl;
    }
    cout << "Total weight of MST: " << mstWeight << endl;
}

int main() {
    int V = 5; // Number of vertices (departments)
    
    vector<Edge> edges;
    edges.push_back(Edge(0, 1, 10));
    edges.push_back(Edge(0, 2, 20));
    edges.push_back(Edge(0, 3, 30));
    edges.push_back(Edge(0, 4, 40));
    edges.push_back(Edge(1, 2, 50));
    edges.push_back(Edge(1, 3, 60));
    edges.push_back(Edge(1, 4, 70));
    edges.push_back(Edge(2, 3, 80));
    edges.push_back(Edge(2, 4, 90));
    edges.push_back(Edge(3, 4, 100));

    kruskal(V, edges);
    
    return 0;
}

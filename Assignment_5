#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};

class BinarySearchTree {
public:
    Node* root;

    BinarySearchTree() {
        root = nullptr;
    }

    void insert(int value) {
        root = insertHelper(root, value);
    }

    void deleteNode(int value) {
        root = deleteHelper(root, value);
    }

    void displayLeafNodes() {
        displayLeafNodesHelper(root);
    }

    void inorder() {
        inorderHelper(root);
        cout << endl;
    }

private:
    Node* insertHelper(Node* node, int value) {
        if (node == nullptr) {
            return new Node(value);
        }

        if (value < node->data) {
            node->left = insertHelper(node->left, value);
        } else if (value > node->data) {
            node->right = insertHelper(node->right, value);
        }

        return node;
    }

    Node* deleteHelper(Node* root, int value) {
        if (root == nullptr) {
            return root;
        }

        if (value < root->data) {
            root->left = deleteHelper(root->left, value);
        } else if (value > root->data) {
            root->right = deleteHelper(root->right, value);
        } else {
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteHelper(root->right, temp->data);
        }

        return root;
    }

    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr) {
            current = current->left;
        }
        return current;
    }

    void displayLeafNodesHelper(Node* node) {
        if (node == nullptr) {
            return;
        }

        if (node->left == nullptr && node->right == nullptr) {
            cout << node->data << " ";
        }

        displayLeafNodesHelper(node->left);
        displayLeafNodesHelper(node->right);
    }

    void inorderHelper(Node* node) {
        if (node != nullptr) {
            inorderHelper(node->left);
            cout << node->data << " ";
            inorderHelper(node->right);
        }
    }
};

int main() {
    BinarySearchTree bst;

    bst.insert(50);
    bst.insert(30);
    bst.insert(20);
    bst.insert(40);
    bst.insert(70);
    bst.insert(60);
    bst.insert(80);

    cout << "Inorder traversal of the BST: ";
    bst.inorder();

    cout << "\nLeaf nodes in the BST: ";
    bst.displayLeafNodes();
    cout << endl;

    cout << "\nDeleting node 20...\n";
    bst.deleteNode(20);
    bst.inorder();

    cout << "\nLeaf nodes after deletion: ";
    bst.displayLeafNodes();
    cout << endl;

    return 0;
}

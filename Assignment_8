#include<iostream>

#define max 20
using namespace std;

class graph
{
  int g[max][max], n, c[max], ch[max], min_dist, client_dist, visit_dist;
  char v[max], str[max][max], min_path[max], client_path[max], visit_path[max];
public:
  graph(int m)
  {
    n = m;
    visit_dist = 0;
    client_dist = 0;
    min_dist = 0;

    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
        g[i][j] = 0;
  }

  void accept_v();
  void accept_e();
  void display();
  void dj_init(int);
  void dj_init();
  void dj(char, char, int);
};

void graph::accept_v()
{
  v[0] = 'A';
  v[1] = 'B';
  v[2] = 'C';
  v[3] = 'D';
  v[4] = 'E';
}

void graph::accept_e()
{
  g[0][1] = g[1][0] = 10;
  g[0][2] = g[2][0] = 20;
  g[0][3] = g[3][0] = 30;
  g[0][4] = g[4][0] = 40;
  g[1][2] = g[2][1] = 50;
  g[1][3] = g[3][1] = 60;
  g[1][4] = g[4][1] = 70;
  g[2][3] = g[3][2] = 80;
  g[2][4] = g[4][2] = 90;
  g[3][4] = g[4][3] = 100;
}

void graph::display()
{
  cout << "   ";
  for (int i = 0; i < n; i++) 
    cout << "\t" << v[i];
  
  cout << "\n";
  for (int i = 0; i < n; i++)
  {
    cout << v[i];
    for (int j = 0; j < n; j++)
    {
      cout << "\t" << g[i][j];
    }
    cout << "\n";
  }
}

void graph::dj_init()
{
  int i, j;
  for (i = 0; i < n; i++)
  {
    c[i] = 9999;
    ch[i] = 0;
    for (j = 0; j < n; j++)
    {
      str[i][j] = '-';
    }
  }
}

void graph::dj_init(int i)
{
  int j;
  for (j = 0; j < n; j++)
  {
    str[i][j] = '-';
  }
}

void graph::dj(char s, char d, int f)
{
  dj_init();
  int i, j, l, k, flag, min = 999, cst = 0;
  i = 0;
  while (v[i] != s)
    i++;
  c[i] = 0;

  k = 0;
  str[i][k] = v[i];
  do
  {
    ch[i] = 1;
    min = 999;
    for (j = 0; j < n; j++)
    {
      flag = 0;
      cst = c[i] + g[i][j];
      if (g[i][j] != 0 && i != j && cst < c[j])
      {
        k = 0;
        c[j] = cst;
        dj_init(j);
        while (flag == 0)
        {
          str[j][k] = str[i][k];
          k++;
          if (str[i][k] == '-')
            flag = 1;
        }
        str[j][k] = v[j];
      }
    }

    for (l = 0; l < n; l++)
    {
      if (c[l] <= min && ch[l] == 0)
      {
        min = c[l];
        i = l;
      }
    }

  } while (v[i] != d);

  j = 0;
  if (f == 0)
    min_dist = c[i];
  else
    client_dist = c[i];
  if (f == 0)
    cout << "\n\n\nMinimum Distance : " << c[i] << "\nShortest Path : ";
  while (str[i][j] != '-')
  {
    if (f == 0)
      min_path[j] = str[i][j];
    if (f == 0)
      cout << " " << str[i][j];
    j++;
  }
  min_path[j] = '\0';
  cout << "\n\n";
  j = 1;
  while (str[i][j] != '-' && f == 1)
  {
    client_path[j - 1] = str[i][j];
    j++;
  }
  client_path[j - 1] = '\0';
  cout << "\n\n\n\nShortest Distance\n\n";
  for (int h = 0; h < n; h++)
  {
    cout << "\n " << v[h] << " " << c[h] << "\n\t";
    for (int m = 0; m < n; m++)
    {
      cout << " " << str[h][m];
    }
  }
}

int main()
{
  int n = 5;
  graph g(n);

  g.accept_v();
  g.accept_e();

  g.display();

  g.dj('A', 'E', 0);
  return 0;
}
